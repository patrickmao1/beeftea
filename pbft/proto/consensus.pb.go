// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: proto/consensus.proto

package consensus

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Message struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Round         int32                  `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	Operation     string                 `protobuf:"bytes,3,opt,name=operation,proto3" json:"operation,omitempty"`
	SenderId      int32                  `protobuf:"varint,4,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message) Reset() {
	*x = Message{}
	mi := &file_proto_consensus_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_proto_consensus_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_proto_consensus_proto_rawDescGZIP(), []int{0}
}

func (x *Message) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Message) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *Message) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *Message) GetSenderId() int32 {
	if x != nil {
		return x.SenderId
	}
	return 0
}

type Ack struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ack) Reset() {
	*x = Ack{}
	mi := &file_proto_consensus_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ack) ProtoMessage() {}

func (x *Ack) ProtoReflect() protoreflect.Message {
	mi := &file_proto_consensus_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ack.ProtoReflect.Descriptor instead.
func (*Ack) Descriptor() ([]byte, []int) {
	return file_proto_consensus_proto_rawDescGZIP(), []int{1}
}

func (x *Ack) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

var File_proto_consensus_proto protoreflect.FileDescriptor

const file_proto_consensus_proto_rawDesc = "" +
	"\n" +
	"\x15proto/consensus.proto\x12\tconsensus\"n\n" +
	"\aMessage\x12\x12\n" +
	"\x04type\x18\x01 \x01(\tR\x04type\x12\x14\n" +
	"\x05round\x18\x02 \x01(\x05R\x05round\x12\x1c\n" +
	"\toperation\x18\x03 \x01(\tR\toperation\x12\x1b\n" +
	"\tsender_id\x18\x04 \x01(\x05R\bsenderId\"\x1f\n" +
	"\x03Ack\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess2>\n" +
	"\tConsensus\x121\n" +
	"\vSendMessage\x12\x12.consensus.Message\x1a\x0e.consensus.AckB\x16Z\x14pbft/proto;consensusb\x06proto3"

var (
	file_proto_consensus_proto_rawDescOnce sync.Once
	file_proto_consensus_proto_rawDescData []byte
)

func file_proto_consensus_proto_rawDescGZIP() []byte {
	file_proto_consensus_proto_rawDescOnce.Do(func() {
		file_proto_consensus_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_consensus_proto_rawDesc), len(file_proto_consensus_proto_rawDesc)))
	})
	return file_proto_consensus_proto_rawDescData
}

var file_proto_consensus_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_proto_consensus_proto_goTypes = []any{
	(*Message)(nil), // 0: consensus.Message
	(*Ack)(nil),     // 1: consensus.Ack
}
var file_proto_consensus_proto_depIdxs = []int32{
	0, // 0: consensus.Consensus.SendMessage:input_type -> consensus.Message
	1, // 1: consensus.Consensus.SendMessage:output_type -> consensus.Ack
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_proto_consensus_proto_init() }
func file_proto_consensus_proto_init() {
	if File_proto_consensus_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_consensus_proto_rawDesc), len(file_proto_consensus_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_consensus_proto_goTypes,
		DependencyIndexes: file_proto_consensus_proto_depIdxs,
		MessageInfos:      file_proto_consensus_proto_msgTypes,
	}.Build()
	File_proto_consensus_proto = out.File
	file_proto_consensus_proto_goTypes = nil
	file_proto_consensus_proto_depIdxs = nil
}
