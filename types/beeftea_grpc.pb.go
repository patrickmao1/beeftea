// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: beeftea.proto

package types

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ExternalRPC_Put_FullMethodName = "/beeftea.ExternalRPC/Put"
	ExternalRPC_Get_FullMethodName = "/beeftea.ExternalRPC/Get"
)

// ExternalRPCClient is the client API for ExternalRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExternalRPCClient interface {
	Put(ctx context.Context, in *PutReq, opts ...grpc.CallOption) (*PutRes, error)
	Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetRes, error)
}

type externalRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewExternalRPCClient(cc grpc.ClientConnInterface) ExternalRPCClient {
	return &externalRPCClient{cc}
}

func (c *externalRPCClient) Put(ctx context.Context, in *PutReq, opts ...grpc.CallOption) (*PutRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PutRes)
	err := c.cc.Invoke(ctx, ExternalRPC_Put_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalRPCClient) Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRes)
	err := c.cc.Invoke(ctx, ExternalRPC_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExternalRPCServer is the server API for ExternalRPC service.
// All implementations should embed UnimplementedExternalRPCServer
// for forward compatibility.
type ExternalRPCServer interface {
	Put(context.Context, *PutReq) (*PutRes, error)
	Get(context.Context, *GetReq) (*GetRes, error)
}

// UnimplementedExternalRPCServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedExternalRPCServer struct{}

func (UnimplementedExternalRPCServer) Put(context.Context, *PutReq) (*PutRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedExternalRPCServer) Get(context.Context, *GetReq) (*GetRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedExternalRPCServer) testEmbeddedByValue() {}

// UnsafeExternalRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExternalRPCServer will
// result in compilation errors.
type UnsafeExternalRPCServer interface {
	mustEmbedUnimplementedExternalRPCServer()
}

func RegisterExternalRPCServer(s grpc.ServiceRegistrar, srv ExternalRPCServer) {
	// If the following call pancis, it indicates UnimplementedExternalRPCServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ExternalRPC_ServiceDesc, srv)
}

func _ExternalRPC_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalRPCServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalRPC_Put_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalRPCServer).Put(ctx, req.(*PutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalRPC_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalRPCServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalRPC_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalRPCServer).Get(ctx, req.(*GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ExternalRPC_ServiceDesc is the grpc.ServiceDesc for ExternalRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExternalRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "beeftea.ExternalRPC",
	HandlerType: (*ExternalRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _ExternalRPC_Put_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ExternalRPC_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "beeftea.proto",
}

const (
	ConsensusRPC_Send_FullMethodName = "/beeftea.ConsensusRPC/Send"
)

// ConsensusRPCClient is the client API for ConsensusRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConsensusRPCClient interface {
	Send(ctx context.Context, in *Envelope, opts ...grpc.CallOption) (*Empty, error)
}

type consensusRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewConsensusRPCClient(cc grpc.ClientConnInterface) ConsensusRPCClient {
	return &consensusRPCClient{cc}
}

func (c *consensusRPCClient) Send(ctx context.Context, in *Envelope, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ConsensusRPC_Send_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConsensusRPCServer is the server API for ConsensusRPC service.
// All implementations should embed UnimplementedConsensusRPCServer
// for forward compatibility.
type ConsensusRPCServer interface {
	Send(context.Context, *Envelope) (*Empty, error)
}

// UnimplementedConsensusRPCServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedConsensusRPCServer struct{}

func (UnimplementedConsensusRPCServer) Send(context.Context, *Envelope) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedConsensusRPCServer) testEmbeddedByValue() {}

// UnsafeConsensusRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConsensusRPCServer will
// result in compilation errors.
type UnsafeConsensusRPCServer interface {
	mustEmbedUnimplementedConsensusRPCServer()
}

func RegisterConsensusRPCServer(s grpc.ServiceRegistrar, srv ConsensusRPCServer) {
	// If the following call pancis, it indicates UnimplementedConsensusRPCServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ConsensusRPC_ServiceDesc, srv)
}

func _ConsensusRPC_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Envelope)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsensusRPCServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsensusRPC_Send_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsensusRPCServer).Send(ctx, req.(*Envelope))
	}
	return interceptor(ctx, in, info, handler)
}

// ConsensusRPC_ServiceDesc is the grpc.ServiceDesc for ConsensusRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConsensusRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "beeftea.ConsensusRPC",
	HandlerType: (*ConsensusRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _ConsensusRPC_Send_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "beeftea.proto",
}
